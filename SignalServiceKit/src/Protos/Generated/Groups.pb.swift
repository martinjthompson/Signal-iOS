//
//  Copyright (c) 2020 Open Whisper Systems. All rights reserved.
//

///*
/// Copyright (C) 2019 Open Whisper Systems
///
/// Licensed according to the LICENSE file in this repository.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GroupsProtos_AvatarUploadAttributes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String = String()

  var credential: String = String()

  var acl: String = String()

  var algorithm: String = String()

  var date: String = String()

  var policy: String = String()

  var signature: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GroupsProtos_Member {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The UuidCiphertext
  var userID: Data = SwiftProtobuf.Internal.emptyData

  var role: GroupsProtos_Member.Role = .unknown

  /// The ProfileKeyCiphertext
  var profileKey: Data = SwiftProtobuf.Internal.emptyData

  /// ProfileKeyCredentialPresentation
  var presentation: Data = SwiftProtobuf.Internal.emptyData

  /// The Group.revision this member joined at
  var joinedAtRevision: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Role: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0

    /// Normal member
    case `default` // = 1

    /// Group admin
    case administrator // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .default
      case 2: self = .administrator
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .default: return 1
      case .administrator: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension GroupsProtos_Member.Role: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GroupsProtos_Member.Role] = [
    .unknown,
    .default,
    .administrator
  ]
}

#endif  // swift(>=4.2)

struct GroupsProtos_PendingMember {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The “invited” member
  var member: GroupsProtos_Member {
    get {return _member ?? GroupsProtos_Member()}
    set {_member = newValue}
  }
  /// Returns true if `member` has been explicitly set.
  var hasMember: Bool {return self._member != nil}
  /// Clears the value of `member`. Subsequent reads from it will return its default value.
  mutating func clearMember() {self._member = nil}

  /// The UID who invited this member
  var addedByUserID: Data = SwiftProtobuf.Internal.emptyData

  /// The time the invitation occurred
  var timestamp: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _member: GroupsProtos_Member?
}

struct GroupsProtos_AccessControl {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Who can modify the group title, avatar, disappearing messages timer
  var attributes: GroupsProtos_AccessControl.AccessRequired = .unknown

  /// Who can add people to the group
  var members: GroupsProtos_AccessControl.AccessRequired = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum AccessRequired: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0

    /// Anyone can make the modification, even if they're not in the group
    case any // = 1

    /// Any group member can make the modification
    case member // = 2

    /// Only administrators can make the modification
    case administrator // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .any
      case 2: self = .member
      case 3: self = .administrator
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .any: return 1
      case .member: return 2
      case .administrator: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension GroupsProtos_AccessControl.AccessRequired: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GroupsProtos_AccessControl.AccessRequired] = [
    .unknown,
    .any,
    .member,
    .administrator
  ]
}

#endif  // swift(>=4.2)

struct GroupsProtos_Group {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// GroupPublicParams
  var publicKey: Data = SwiftProtobuf.Internal.emptyData

  /// Encrypted title
  var title: Data = SwiftProtobuf.Internal.emptyData

  /// Pointer to encrypted avatar (‘key’ from AvatarUploadAttributes)
  var avatar: String = String()

  /// Encrypted timer
  var disappearingMessagesTimer: Data = SwiftProtobuf.Internal.emptyData

  var accessControl: GroupsProtos_AccessControl {
    get {return _accessControl ?? GroupsProtos_AccessControl()}
    set {_accessControl = newValue}
  }
  /// Returns true if `accessControl` has been explicitly set.
  var hasAccessControl: Bool {return self._accessControl != nil}
  /// Clears the value of `accessControl`. Subsequent reads from it will return its default value.
  mutating func clearAccessControl() {self._accessControl = nil}

  /// Current group revision number
  var revision: UInt32 = 0

  var members: [GroupsProtos_Member] = []

  var pendingMembers: [GroupsProtos_PendingMember] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _accessControl: GroupsProtos_AccessControl?
}

struct GroupsProtos_GroupChange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The serialized actions
  var actions: Data = SwiftProtobuf.Internal.emptyData

  /// Server’s signature over serialized actions
  var serverSignature: Data = SwiftProtobuf.Internal.emptyData

  var changeEpoch: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Actions {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Who made the change
    var sourceUuid: Data = SwiftProtobuf.Internal.emptyData

    /// The change revision number
    var revision: UInt32 = 0

    /// Members added
    var addMembers: [GroupsProtos_GroupChange.Actions.AddMemberAction] = []

    /// Members deleted
    var deleteMembers: [GroupsProtos_GroupChange.Actions.DeleteMemberAction] = []

    /// Modified member roles
    var modifyMemberRoles: [GroupsProtos_GroupChange.Actions.ModifyMemberRoleAction] = []

    /// Modified member profile keys
    var modifyMemberProfileKeys: [GroupsProtos_GroupChange.Actions.ModifyMemberProfileKeyAction] = []

    /// Pending members added
    var addPendingMembers: [GroupsProtos_GroupChange.Actions.AddPendingMemberAction] = []

    /// Pending members deleted
    var deletePendingMembers: [GroupsProtos_GroupChange.Actions.DeletePendingMemberAction] = []

    /// Pending invitations accepted
    var promotePendingMembers: [GroupsProtos_GroupChange.Actions.PromotePendingMemberAction] = []

    /// Changed title
    var modifyTitle: GroupsProtos_GroupChange.Actions.ModifyTitleAction {
      get {return _modifyTitle ?? GroupsProtos_GroupChange.Actions.ModifyTitleAction()}
      set {_modifyTitle = newValue}
    }
    /// Returns true if `modifyTitle` has been explicitly set.
    var hasModifyTitle: Bool {return self._modifyTitle != nil}
    /// Clears the value of `modifyTitle`. Subsequent reads from it will return its default value.
    mutating func clearModifyTitle() {self._modifyTitle = nil}

    /// Changed avatar
    var modifyAvatar: GroupsProtos_GroupChange.Actions.ModifyAvatarAction {
      get {return _modifyAvatar ?? GroupsProtos_GroupChange.Actions.ModifyAvatarAction()}
      set {_modifyAvatar = newValue}
    }
    /// Returns true if `modifyAvatar` has been explicitly set.
    var hasModifyAvatar: Bool {return self._modifyAvatar != nil}
    /// Clears the value of `modifyAvatar`. Subsequent reads from it will return its default value.
    mutating func clearModifyAvatar() {self._modifyAvatar = nil}

    /// Changed timer
    var modifyDisappearingMessagesTimer: GroupsProtos_GroupChange.Actions.ModifyDisappearingMessagesTimerAction {
      get {return _modifyDisappearingMessagesTimer ?? GroupsProtos_GroupChange.Actions.ModifyDisappearingMessagesTimerAction()}
      set {_modifyDisappearingMessagesTimer = newValue}
    }
    /// Returns true if `modifyDisappearingMessagesTimer` has been explicitly set.
    var hasModifyDisappearingMessagesTimer: Bool {return self._modifyDisappearingMessagesTimer != nil}
    /// Clears the value of `modifyDisappearingMessagesTimer`. Subsequent reads from it will return its default value.
    mutating func clearModifyDisappearingMessagesTimer() {self._modifyDisappearingMessagesTimer = nil}

    /// Changed attributes access control
    var modifyAttributesAccess: GroupsProtos_GroupChange.Actions.ModifyAttributesAccessControlAction {
      get {return _modifyAttributesAccess ?? GroupsProtos_GroupChange.Actions.ModifyAttributesAccessControlAction()}
      set {_modifyAttributesAccess = newValue}
    }
    /// Returns true if `modifyAttributesAccess` has been explicitly set.
    var hasModifyAttributesAccess: Bool {return self._modifyAttributesAccess != nil}
    /// Clears the value of `modifyAttributesAccess`. Subsequent reads from it will return its default value.
    mutating func clearModifyAttributesAccess() {self._modifyAttributesAccess = nil}

    /// Changed membership access control
    var modifyMemberAccess: GroupsProtos_GroupChange.Actions.ModifyMembersAccessControlAction {
      get {return _modifyMemberAccess ?? GroupsProtos_GroupChange.Actions.ModifyMembersAccessControlAction()}
      set {_modifyMemberAccess = newValue}
    }
    /// Returns true if `modifyMemberAccess` has been explicitly set.
    var hasModifyMemberAccess: Bool {return self._modifyMemberAccess != nil}
    /// Clears the value of `modifyMemberAccess`. Subsequent reads from it will return its default value.
    mutating func clearModifyMemberAccess() {self._modifyMemberAccess = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct AddMemberAction {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var added: GroupsProtos_Member {
        get {return _added ?? GroupsProtos_Member()}
        set {_added = newValue}
      }
      /// Returns true if `added` has been explicitly set.
      var hasAdded: Bool {return self._added != nil}
      /// Clears the value of `added`. Subsequent reads from it will return its default value.
      mutating func clearAdded() {self._added = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _added: GroupsProtos_Member?
    }

    struct DeleteMemberAction {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var deletedUserID: Data = SwiftProtobuf.Internal.emptyData

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct ModifyMemberRoleAction {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var userID: Data = SwiftProtobuf.Internal.emptyData

      var role: GroupsProtos_Member.Role = .unknown

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct ModifyMemberProfileKeyAction {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var presentation: Data = SwiftProtobuf.Internal.emptyData

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct AddPendingMemberAction {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var added: GroupsProtos_PendingMember {
        get {return _added ?? GroupsProtos_PendingMember()}
        set {_added = newValue}
      }
      /// Returns true if `added` has been explicitly set.
      var hasAdded: Bool {return self._added != nil}
      /// Clears the value of `added`. Subsequent reads from it will return its default value.
      mutating func clearAdded() {self._added = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _added: GroupsProtos_PendingMember?
    }

    struct DeletePendingMemberAction {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var deletedUserID: Data = SwiftProtobuf.Internal.emptyData

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct PromotePendingMemberAction {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var presentation: Data = SwiftProtobuf.Internal.emptyData

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct ModifyTitleAction {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var title: Data = SwiftProtobuf.Internal.emptyData

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct ModifyAvatarAction {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var avatar: String = String()

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct ModifyDisappearingMessagesTimerAction {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var timer: Data = SwiftProtobuf.Internal.emptyData

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct ModifyAttributesAccessControlAction {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var attributesAccess: GroupsProtos_AccessControl.AccessRequired = .unknown

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct ModifyAvatarAccessControlAction {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var avatarAccess: GroupsProtos_AccessControl.AccessRequired = .unknown

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct ModifyMembersAccessControlAction {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var membersAccess: GroupsProtos_AccessControl.AccessRequired = .unknown

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    init() {}

    fileprivate var _modifyTitle: GroupsProtos_GroupChange.Actions.ModifyTitleAction?
    fileprivate var _modifyAvatar: GroupsProtos_GroupChange.Actions.ModifyAvatarAction?
    fileprivate var _modifyDisappearingMessagesTimer: GroupsProtos_GroupChange.Actions.ModifyDisappearingMessagesTimerAction?
    fileprivate var _modifyAttributesAccess: GroupsProtos_GroupChange.Actions.ModifyAttributesAccessControlAction?
    fileprivate var _modifyMemberAccess: GroupsProtos_GroupChange.Actions.ModifyMembersAccessControlAction?
  }

  init() {}
}

struct GroupsProtos_GroupChanges {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var groupChanges: [GroupsProtos_GroupChanges.GroupChangeState] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct GroupChangeState {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var groupChange: GroupsProtos_GroupChange {
      get {return _groupChange ?? GroupsProtos_GroupChange()}
      set {_groupChange = newValue}
    }
    /// Returns true if `groupChange` has been explicitly set.
    var hasGroupChange: Bool {return self._groupChange != nil}
    /// Clears the value of `groupChange`. Subsequent reads from it will return its default value.
    mutating func clearGroupChange() {self._groupChange = nil}

    var groupState: GroupsProtos_Group {
      get {return _groupState ?? GroupsProtos_Group()}
      set {_groupState = newValue}
    }
    /// Returns true if `groupState` has been explicitly set.
    var hasGroupState: Bool {return self._groupState != nil}
    /// Clears the value of `groupState`. Subsequent reads from it will return its default value.
    mutating func clearGroupState() {self._groupState = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _groupChange: GroupsProtos_GroupChange?
    fileprivate var _groupState: GroupsProtos_Group?
  }

  init() {}
}

struct GroupsProtos_GroupAttributeBlob {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var content: GroupsProtos_GroupAttributeBlob.OneOf_Content?

  var title: String {
    get {
      if case .title(let v)? = content {return v}
      return String()
    }
    set {content = .title(newValue)}
  }

  var avatar: Data {
    get {
      if case .avatar(let v)? = content {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {content = .avatar(newValue)}
  }

  var disappearingMessagesDuration: UInt32 {
    get {
      if case .disappearingMessagesDuration(let v)? = content {return v}
      return 0
    }
    set {content = .disappearingMessagesDuration(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Content: Equatable {
    case title(String)
    case avatar(Data)
    case disappearingMessagesDuration(UInt32)

  #if !swift(>=4.1)
    static func ==(lhs: GroupsProtos_GroupAttributeBlob.OneOf_Content, rhs: GroupsProtos_GroupAttributeBlob.OneOf_Content) -> Bool {
      switch (lhs, rhs) {
      case (.title(let l), .title(let r)): return l == r
      case (.avatar(let l), .avatar(let r)): return l == r
      case (.disappearingMessagesDuration(let l), .disappearingMessagesDuration(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "GroupsProtos"

extension GroupsProtos_AvatarUploadAttributes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AvatarUploadAttributes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "credential"),
    3: .same(proto: "acl"),
    4: .same(proto: "algorithm"),
    5: .same(proto: "date"),
    6: .same(proto: "policy"),
    7: .same(proto: "signature")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularStringField(value: &self.credential)
      case 3: try decoder.decodeSingularStringField(value: &self.acl)
      case 4: try decoder.decodeSingularStringField(value: &self.algorithm)
      case 5: try decoder.decodeSingularStringField(value: &self.date)
      case 6: try decoder.decodeSingularStringField(value: &self.policy)
      case 7: try decoder.decodeSingularStringField(value: &self.signature)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.credential.isEmpty {
      try visitor.visitSingularStringField(value: self.credential, fieldNumber: 2)
    }
    if !self.acl.isEmpty {
      try visitor.visitSingularStringField(value: self.acl, fieldNumber: 3)
    }
    if !self.algorithm.isEmpty {
      try visitor.visitSingularStringField(value: self.algorithm, fieldNumber: 4)
    }
    if !self.date.isEmpty {
      try visitor.visitSingularStringField(value: self.date, fieldNumber: 5)
    }
    if !self.policy.isEmpty {
      try visitor.visitSingularStringField(value: self.policy, fieldNumber: 6)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularStringField(value: self.signature, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_AvatarUploadAttributes, rhs: GroupsProtos_AvatarUploadAttributes) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.credential != rhs.credential {return false}
    if lhs.acl != rhs.acl {return false}
    if lhs.algorithm != rhs.algorithm {return false}
    if lhs.date != rhs.date {return false}
    if lhs.policy != rhs.policy {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_Member: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Member"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "role"),
    3: .same(proto: "profileKey"),
    4: .same(proto: "presentation"),
    5: .same(proto: "joinedAtRevision")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.userID)
      case 2: try decoder.decodeSingularEnumField(value: &self.role)
      case 3: try decoder.decodeSingularBytesField(value: &self.profileKey)
      case 4: try decoder.decodeSingularBytesField(value: &self.presentation)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.joinedAtRevision)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userID.isEmpty {
      try visitor.visitSingularBytesField(value: self.userID, fieldNumber: 1)
    }
    if self.role != .unknown {
      try visitor.visitSingularEnumField(value: self.role, fieldNumber: 2)
    }
    if !self.profileKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.profileKey, fieldNumber: 3)
    }
    if !self.presentation.isEmpty {
      try visitor.visitSingularBytesField(value: self.presentation, fieldNumber: 4)
    }
    if self.joinedAtRevision != 0 {
      try visitor.visitSingularUInt32Field(value: self.joinedAtRevision, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_Member, rhs: GroupsProtos_Member) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.role != rhs.role {return false}
    if lhs.profileKey != rhs.profileKey {return false}
    if lhs.presentation != rhs.presentation {return false}
    if lhs.joinedAtRevision != rhs.joinedAtRevision {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_Member.Role: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "DEFAULT"),
    2: .same(proto: "ADMINISTRATOR")
  ]
}

extension GroupsProtos_PendingMember: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PendingMember"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "member"),
    2: .same(proto: "addedByUserId"),
    3: .same(proto: "timestamp")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._member)
      case 2: try decoder.decodeSingularBytesField(value: &self.addedByUserID)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.timestamp)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._member {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.addedByUserID.isEmpty {
      try visitor.visitSingularBytesField(value: self.addedByUserID, fieldNumber: 2)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_PendingMember, rhs: GroupsProtos_PendingMember) -> Bool {
    if lhs._member != rhs._member {return false}
    if lhs.addedByUserID != rhs.addedByUserID {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_AccessControl: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccessControl"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "attributes"),
    2: .same(proto: "members")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.attributes)
      case 2: try decoder.decodeSingularEnumField(value: &self.members)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.attributes != .unknown {
      try visitor.visitSingularEnumField(value: self.attributes, fieldNumber: 1)
    }
    if self.members != .unknown {
      try visitor.visitSingularEnumField(value: self.members, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_AccessControl, rhs: GroupsProtos_AccessControl) -> Bool {
    if lhs.attributes != rhs.attributes {return false}
    if lhs.members != rhs.members {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_AccessControl.AccessRequired: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "ANY"),
    2: .same(proto: "MEMBER"),
    3: .same(proto: "ADMINISTRATOR")
  ]
}

extension GroupsProtos_Group: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Group"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "publicKey"),
    2: .same(proto: "title"),
    3: .same(proto: "avatar"),
    4: .same(proto: "disappearingMessagesTimer"),
    5: .same(proto: "accessControl"),
    6: .same(proto: "revision"),
    7: .same(proto: "members"),
    8: .same(proto: "pendingMembers")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.publicKey)
      case 2: try decoder.decodeSingularBytesField(value: &self.title)
      case 3: try decoder.decodeSingularStringField(value: &self.avatar)
      case 4: try decoder.decodeSingularBytesField(value: &self.disappearingMessagesTimer)
      case 5: try decoder.decodeSingularMessageField(value: &self._accessControl)
      case 6: try decoder.decodeSingularUInt32Field(value: &self.revision)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.members)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.pendingMembers)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.publicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKey, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularBytesField(value: self.title, fieldNumber: 2)
    }
    if !self.avatar.isEmpty {
      try visitor.visitSingularStringField(value: self.avatar, fieldNumber: 3)
    }
    if !self.disappearingMessagesTimer.isEmpty {
      try visitor.visitSingularBytesField(value: self.disappearingMessagesTimer, fieldNumber: 4)
    }
    if let v = self._accessControl {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if self.revision != 0 {
      try visitor.visitSingularUInt32Field(value: self.revision, fieldNumber: 6)
    }
    if !self.members.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.members, fieldNumber: 7)
    }
    if !self.pendingMembers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pendingMembers, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_Group, rhs: GroupsProtos_Group) -> Bool {
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.title != rhs.title {return false}
    if lhs.avatar != rhs.avatar {return false}
    if lhs.disappearingMessagesTimer != rhs.disappearingMessagesTimer {return false}
    if lhs._accessControl != rhs._accessControl {return false}
    if lhs.revision != rhs.revision {return false}
    if lhs.members != rhs.members {return false}
    if lhs.pendingMembers != rhs.pendingMembers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_GroupChange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupChange"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "actions"),
    2: .same(proto: "serverSignature"),
    3: .same(proto: "changeEpoch")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.actions)
      case 2: try decoder.decodeSingularBytesField(value: &self.serverSignature)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.changeEpoch)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.actions.isEmpty {
      try visitor.visitSingularBytesField(value: self.actions, fieldNumber: 1)
    }
    if !self.serverSignature.isEmpty {
      try visitor.visitSingularBytesField(value: self.serverSignature, fieldNumber: 2)
    }
    if self.changeEpoch != 0 {
      try visitor.visitSingularUInt32Field(value: self.changeEpoch, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_GroupChange, rhs: GroupsProtos_GroupChange) -> Bool {
    if lhs.actions != rhs.actions {return false}
    if lhs.serverSignature != rhs.serverSignature {return false}
    if lhs.changeEpoch != rhs.changeEpoch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_GroupChange.Actions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GroupsProtos_GroupChange.protoMessageName + ".Actions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sourceUuid"),
    2: .same(proto: "revision"),
    3: .same(proto: "addMembers"),
    4: .same(proto: "deleteMembers"),
    5: .same(proto: "modifyMemberRoles"),
    6: .same(proto: "modifyMemberProfileKeys"),
    7: .same(proto: "addPendingMembers"),
    8: .same(proto: "deletePendingMembers"),
    9: .same(proto: "promotePendingMembers"),
    10: .same(proto: "modifyTitle"),
    11: .same(proto: "modifyAvatar"),
    12: .same(proto: "modifyDisappearingMessagesTimer"),
    13: .same(proto: "modifyAttributesAccess"),
    14: .same(proto: "modifyMemberAccess")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.sourceUuid)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.revision)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.addMembers)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.deleteMembers)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.modifyMemberRoles)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.modifyMemberProfileKeys)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.addPendingMembers)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.deletePendingMembers)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.promotePendingMembers)
      case 10: try decoder.decodeSingularMessageField(value: &self._modifyTitle)
      case 11: try decoder.decodeSingularMessageField(value: &self._modifyAvatar)
      case 12: try decoder.decodeSingularMessageField(value: &self._modifyDisappearingMessagesTimer)
      case 13: try decoder.decodeSingularMessageField(value: &self._modifyAttributesAccess)
      case 14: try decoder.decodeSingularMessageField(value: &self._modifyMemberAccess)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sourceUuid.isEmpty {
      try visitor.visitSingularBytesField(value: self.sourceUuid, fieldNumber: 1)
    }
    if self.revision != 0 {
      try visitor.visitSingularUInt32Field(value: self.revision, fieldNumber: 2)
    }
    if !self.addMembers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.addMembers, fieldNumber: 3)
    }
    if !self.deleteMembers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deleteMembers, fieldNumber: 4)
    }
    if !self.modifyMemberRoles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.modifyMemberRoles, fieldNumber: 5)
    }
    if !self.modifyMemberProfileKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.modifyMemberProfileKeys, fieldNumber: 6)
    }
    if !self.addPendingMembers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.addPendingMembers, fieldNumber: 7)
    }
    if !self.deletePendingMembers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deletePendingMembers, fieldNumber: 8)
    }
    if !self.promotePendingMembers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.promotePendingMembers, fieldNumber: 9)
    }
    if let v = self._modifyTitle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._modifyAvatar {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._modifyDisappearingMessagesTimer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }
    if let v = self._modifyAttributesAccess {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }
    if let v = self._modifyMemberAccess {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_GroupChange.Actions, rhs: GroupsProtos_GroupChange.Actions) -> Bool {
    if lhs.sourceUuid != rhs.sourceUuid {return false}
    if lhs.revision != rhs.revision {return false}
    if lhs.addMembers != rhs.addMembers {return false}
    if lhs.deleteMembers != rhs.deleteMembers {return false}
    if lhs.modifyMemberRoles != rhs.modifyMemberRoles {return false}
    if lhs.modifyMemberProfileKeys != rhs.modifyMemberProfileKeys {return false}
    if lhs.addPendingMembers != rhs.addPendingMembers {return false}
    if lhs.deletePendingMembers != rhs.deletePendingMembers {return false}
    if lhs.promotePendingMembers != rhs.promotePendingMembers {return false}
    if lhs._modifyTitle != rhs._modifyTitle {return false}
    if lhs._modifyAvatar != rhs._modifyAvatar {return false}
    if lhs._modifyDisappearingMessagesTimer != rhs._modifyDisappearingMessagesTimer {return false}
    if lhs._modifyAttributesAccess != rhs._modifyAttributesAccess {return false}
    if lhs._modifyMemberAccess != rhs._modifyMemberAccess {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_GroupChange.Actions.AddMemberAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GroupsProtos_GroupChange.Actions.protoMessageName + ".AddMemberAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "added")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._added)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._added {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_GroupChange.Actions.AddMemberAction, rhs: GroupsProtos_GroupChange.Actions.AddMemberAction) -> Bool {
    if lhs._added != rhs._added {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_GroupChange.Actions.DeleteMemberAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GroupsProtos_GroupChange.Actions.protoMessageName + ".DeleteMemberAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "deletedUserId")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.deletedUserID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deletedUserID.isEmpty {
      try visitor.visitSingularBytesField(value: self.deletedUserID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_GroupChange.Actions.DeleteMemberAction, rhs: GroupsProtos_GroupChange.Actions.DeleteMemberAction) -> Bool {
    if lhs.deletedUserID != rhs.deletedUserID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_GroupChange.Actions.ModifyMemberRoleAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GroupsProtos_GroupChange.Actions.protoMessageName + ".ModifyMemberRoleAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "role")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.userID)
      case 2: try decoder.decodeSingularEnumField(value: &self.role)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userID.isEmpty {
      try visitor.visitSingularBytesField(value: self.userID, fieldNumber: 1)
    }
    if self.role != .unknown {
      try visitor.visitSingularEnumField(value: self.role, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_GroupChange.Actions.ModifyMemberRoleAction, rhs: GroupsProtos_GroupChange.Actions.ModifyMemberRoleAction) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.role != rhs.role {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_GroupChange.Actions.ModifyMemberProfileKeyAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GroupsProtos_GroupChange.Actions.protoMessageName + ".ModifyMemberProfileKeyAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "presentation")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.presentation)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.presentation.isEmpty {
      try visitor.visitSingularBytesField(value: self.presentation, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_GroupChange.Actions.ModifyMemberProfileKeyAction, rhs: GroupsProtos_GroupChange.Actions.ModifyMemberProfileKeyAction) -> Bool {
    if lhs.presentation != rhs.presentation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_GroupChange.Actions.AddPendingMemberAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GroupsProtos_GroupChange.Actions.protoMessageName + ".AddPendingMemberAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "added")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._added)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._added {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_GroupChange.Actions.AddPendingMemberAction, rhs: GroupsProtos_GroupChange.Actions.AddPendingMemberAction) -> Bool {
    if lhs._added != rhs._added {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_GroupChange.Actions.DeletePendingMemberAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GroupsProtos_GroupChange.Actions.protoMessageName + ".DeletePendingMemberAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "deletedUserId")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.deletedUserID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deletedUserID.isEmpty {
      try visitor.visitSingularBytesField(value: self.deletedUserID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_GroupChange.Actions.DeletePendingMemberAction, rhs: GroupsProtos_GroupChange.Actions.DeletePendingMemberAction) -> Bool {
    if lhs.deletedUserID != rhs.deletedUserID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_GroupChange.Actions.PromotePendingMemberAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GroupsProtos_GroupChange.Actions.protoMessageName + ".PromotePendingMemberAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "presentation")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.presentation)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.presentation.isEmpty {
      try visitor.visitSingularBytesField(value: self.presentation, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_GroupChange.Actions.PromotePendingMemberAction, rhs: GroupsProtos_GroupChange.Actions.PromotePendingMemberAction) -> Bool {
    if lhs.presentation != rhs.presentation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_GroupChange.Actions.ModifyTitleAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GroupsProtos_GroupChange.Actions.protoMessageName + ".ModifyTitleAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.title)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularBytesField(value: self.title, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_GroupChange.Actions.ModifyTitleAction, rhs: GroupsProtos_GroupChange.Actions.ModifyTitleAction) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_GroupChange.Actions.ModifyAvatarAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GroupsProtos_GroupChange.Actions.protoMessageName + ".ModifyAvatarAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "avatar")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.avatar)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.avatar.isEmpty {
      try visitor.visitSingularStringField(value: self.avatar, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_GroupChange.Actions.ModifyAvatarAction, rhs: GroupsProtos_GroupChange.Actions.ModifyAvatarAction) -> Bool {
    if lhs.avatar != rhs.avatar {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_GroupChange.Actions.ModifyDisappearingMessagesTimerAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GroupsProtos_GroupChange.Actions.protoMessageName + ".ModifyDisappearingMessagesTimerAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timer")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.timer)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.timer.isEmpty {
      try visitor.visitSingularBytesField(value: self.timer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_GroupChange.Actions.ModifyDisappearingMessagesTimerAction, rhs: GroupsProtos_GroupChange.Actions.ModifyDisappearingMessagesTimerAction) -> Bool {
    if lhs.timer != rhs.timer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_GroupChange.Actions.ModifyAttributesAccessControlAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GroupsProtos_GroupChange.Actions.protoMessageName + ".ModifyAttributesAccessControlAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "attributesAccess")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.attributesAccess)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.attributesAccess != .unknown {
      try visitor.visitSingularEnumField(value: self.attributesAccess, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_GroupChange.Actions.ModifyAttributesAccessControlAction, rhs: GroupsProtos_GroupChange.Actions.ModifyAttributesAccessControlAction) -> Bool {
    if lhs.attributesAccess != rhs.attributesAccess {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_GroupChange.Actions.ModifyAvatarAccessControlAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GroupsProtos_GroupChange.Actions.protoMessageName + ".ModifyAvatarAccessControlAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "avatarAccess")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.avatarAccess)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.avatarAccess != .unknown {
      try visitor.visitSingularEnumField(value: self.avatarAccess, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_GroupChange.Actions.ModifyAvatarAccessControlAction, rhs: GroupsProtos_GroupChange.Actions.ModifyAvatarAccessControlAction) -> Bool {
    if lhs.avatarAccess != rhs.avatarAccess {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_GroupChange.Actions.ModifyMembersAccessControlAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GroupsProtos_GroupChange.Actions.protoMessageName + ".ModifyMembersAccessControlAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "membersAccess")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.membersAccess)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.membersAccess != .unknown {
      try visitor.visitSingularEnumField(value: self.membersAccess, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_GroupChange.Actions.ModifyMembersAccessControlAction, rhs: GroupsProtos_GroupChange.Actions.ModifyMembersAccessControlAction) -> Bool {
    if lhs.membersAccess != rhs.membersAccess {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_GroupChanges: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupChanges"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "groupChanges")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.groupChanges)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupChanges.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groupChanges, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_GroupChanges, rhs: GroupsProtos_GroupChanges) -> Bool {
    if lhs.groupChanges != rhs.groupChanges {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_GroupChanges.GroupChangeState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GroupsProtos_GroupChanges.protoMessageName + ".GroupChangeState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "groupChange"),
    2: .same(proto: "groupState")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._groupChange)
      case 2: try decoder.decodeSingularMessageField(value: &self._groupState)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._groupChange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._groupState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_GroupChanges.GroupChangeState, rhs: GroupsProtos_GroupChanges.GroupChangeState) -> Bool {
    if lhs._groupChange != rhs._groupChange {return false}
    if lhs._groupState != rhs._groupState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GroupsProtos_GroupAttributeBlob: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupAttributeBlob"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "avatar"),
    3: .same(proto: "disappearingMessagesDuration")
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.content != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.content = .title(v)}
      case 2:
        if self.content != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.content = .avatar(v)}
      case 3:
        if self.content != nil {try decoder.handleConflictingOneOf()}
        var v: UInt32?
        try decoder.decodeSingularUInt32Field(value: &v)
        if let v = v {self.content = .disappearingMessagesDuration(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.content {
    case .title(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    case .avatar(let v)?:
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    case .disappearingMessagesDuration(let v)?:
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GroupsProtos_GroupAttributeBlob, rhs: GroupsProtos_GroupAttributeBlob) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
